* R programming

** Programming with functions

*** How to recover the name of the variable passed as argument?

    #+begin_src R
      z <- 1:10
      f <- function(x) {
	varName <- as.character(as.list(match.call())$x) ## "z"
      }
    #+end_src

    Source: [[https://stackoverflow.com/a/19134129/2860744][lazy evaluation - Passing a variable name to a function in R]]

*** How to get all function call parameters as a list?

    Call =as.list(match.call())[-1]= within your function

    #+begin_src R
      mydummyfun <- function(x, y, main = NULL, ...) {
	l <- as.list(match.call())[-1]
	do.call(plot, l)
      }

      mydummyfun(1:10, 1:10, ylab = "Ex")
    #+end_src

    Source: [[https://stackoverflow.com/a/11892680/2860744][Get all Parameters as List]]

    If you want to pass all the arguments to a new function:
    use =match.call= to get the complete call, and inject
    the name of the new function, and evaluate the modified call.


    #+begin_src R
      f1 <- function(a, b, c) { sum(a, b, c^2) }

      f2 <- function(a, b, c) { prod(a, b, c) }

      f  <- function(a, b, c) {
	fun <- f1
	if (a < 0)
	  fun <- f2

	## get the call (fun and args)
	thiscall      <- match.call(expand.dots = TRUE)
	## change function name
	thiscall[[1]] <- fun
	## evaluate new call same as fun(a, b, c)
	eval.parent(thiscall)

      }

      f(+1, 0, 5)
      f(-1, 0, 5)
    #+end_src

    Source: [[https://stackoverflow.com/a/56811164/2860744][Passing all arguments to another function]]

*** How to add a hook to a function call?

    Use =trace= to get execute an expression after and before a
    function call.

    #+begin_src R
      f_before <- function() { print("Before call") }
      f_after  <- function() { print("After  call") }

      trace(base::cumsum, f_before, f_after, print = FALSE)
      cumsum(1:10)

      untrace(base::cumsum)
      cumsum(1:10)
    #+end_src

*** How to mimic function overloading?

    Unfortunately, I haven't found anything better than optional
    arguments. See for example [[https://github.com/wch/r-source/blob/bba8fa69246ea248da33a566f463196614bb5242/src/library/grDevices/R/xyz.coords.R#L21][?xy.coords]]. In some situations, there
    might be better approaches.

    Source: [[https://stackoverflow.com/a/9266265/2860744][R - Function overloading]]

** Vectorization

*** Why are for loops slow in R?

    =for=, =:=, =[=, =[<-= are all function calls and function calls
    can be time-consuming.  The following loop is, in fact, a sequence
    of many function calls. Vectorized functions are written in C and
    are typically faster.

    #+begin_src R
      N      <- 20
      fib    <- rep(NA, 10)
      fib[1] <- 0
      fib[2] <- 1

      for (i in 3:N)
	fib[i] <- fib[i - 1] + fib[i - 2]
    #+end_src

    Source: The Art of R Programming: A Tour of Statistical Software
    Design section 14.1.1

*** Why is =apply= not fast?

    While =lapply= and others are implemented in C, =apply= is actually
    implemented in R and might not provide a high speedup.

    Source: The Art of R Programming: A Tour of Statistical Software
    Design section 14.1.1

*** Which base R functions are vectorized?

    Not an comprehensive list

    - Math operators
      - =+=, =-=, etc
    - Logic
      - ====, =!==, etc
    - Vectors
      - ifelse
      - which
      - where
      - any
      - all
      - cumsum
      - cumprod
      - abs
      - pmin
      - pmax
    - Matrix:
      - rowSums
      - colSums
      - lower.tri
      - upper.tri
    - All pairs
      - outer
    - All combinations
      - combin
      - expand.grid

*** How to vectorize the functions and the arguments?

    Use =mapply=. Pass the vector of functions as an argument to an
    anonymous function that calls the function passed as argument to
    the remaining arguments (credits: Fendur at libera.chat)
    #+begin_src R
      funs <- c(function(x, y) x + y, function(x, y) x^2 * y)
      grd  <- expand.grid(fun = funs, x = 1:3, y = 1:4)
      with(grd, mapply(function(f, x, y) f(x, y), fun, x, y))
    #+end_src

    Use ellipsis for functions taking different arguments
    #+begin_src R
      funs <- c(function(x, y, ...) x + y, function(x, y, z) x^2 * y/z)
      grd  <- expand.grid(fun = funs, x = 1:3, y = 1:4, z = 1:2)
      with(grd, mapply(function(f, x, y, z) f(x, y, z), fun, x, y, z))
    #+end_src

    In the case of two argument functions, the explicit expansion can
    be avoided using =outer=
    #+begin_src R
      funs <- c(function(x, y) x + y, function(x, y) x^2 * y)
      sapply(funs, function(f) outer(1:3, 1:4))
      ## Using R > 4.1
      sapply(funs, \(f) outer(1:3, 1:4))
    #+end_src

** How to create a sequence within groups?

   #+begin_src R
     x <- unlist(replicate(10, rep(sample(LETTERS, 1), rpois(1, 4))))
     sequence(rle(x)$lengths)                  # if ordered
     unlist(sapply(unname(table(x)), seq.int)) # doesn't need ordering
   #+end_src

   Source: [[https://stackoverflow.com/a/18815118/2860744][generate sequence within group in R]]

** How to identify value changes in a sequence?

   #+begin_src R
     x <- unlist(replicate(10, rep(sample(LETTERS, 1), rpois(1, 4))))
     head(cumsum(rle(x)$lengths)+1, -1)
   #+end_src

   Source: [[https://stackoverflow.com/a/45154771/2860744][Identifying where value changes in R data.frame column]]

** How to renumber a group?

   Note that =as.numeric(as.factor(x))= does not work if =x= contains
   numbers. Also, the match-unique combo scales better with large
   vectors.

   #+begin_src R
     x <- c(4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 1, 1, 1, 5, 5, 5, 5)
     match(x, unique(x))
     ## [1] 1 1 1 2 2 2 2 3 3 3 3 4 4 4 5 5 5 5
   #+end_src

   Source: [[https://stackoverflow.com/a/6113019/2860744][how to create a consecutive group number]]

** How to make a cross table with a custom function (e.g., mean)?

   #+begin_src R
     addmargins(xtabs(value ~ ., aggregate(value ~ factor1, factor2, DF, mean)),
		FUN = mean)
   #+end_src

** How to make lapply return a data.frame?

   If =x= is a =data.frame=, which is a list with attributes, use =x[]=
   to preserve all attributes.

   #+begin_src R
     x[] = lapply(x, type.convert)
   #+end_src

   Source: [[https://github.com/J-Moravec][Jiří Moravec]]

** How to split a matrix row-wise as a list?

   Use =base::asplit= for efficiency, where =asplit(X, 1)= and
   =asplit(X, 2)= return a list of rows and columns respectively.

   #+begin_src R
     ## I just learned about asplit
     asplit(X, 1)

     ## Original note
     X <- matrix(rnorm(100), nrow = 20)
     l <- as.list(as.data.frame(t(X)))
   #+end_src

** How to look up a value among possibilities?

   The workhorse of any labeling function

   #+begin_src R
     l <- list(key1 = "value1", key2 = NA, key3 = 022)
     lookup <- function(x, l) { unlist(l[x]) }
   #+end_src

   Source: [[https://gist.github.com/luisdamiano/c8dc80775970e3159b6d4282e1bd85dd][benchmark unlist versus do.call(c, list) for list lookup in R]]

** How to remove columns with all NA fast?

   General approach with Base R only

   #+begin_src R
     Filter(function(x)!all(is.na(x)), df)
   #+end_src

   Via data.table for general time and memory efficiency (40% faster in example)

   #+begin_src R
     DT[, which(unlist(lapply(DT, function(x)!all(is.na(x))))), with = FALSE]
   #+end_src

   Source: [[https://stackoverflow.com/a/12614723/2860744][remove columns from dataframe where ALL values are NA]]

** How to fast apply a function over a ragged array?

   Use =unlist(lapply(split(x, f), FUN))= for speed, but consider
   =tapply(x, f, FUN)= for readibility maybe?

   #+begin_src R
     ## Unit: microseconds
     ##     expr      min        lq      mean    median        uq       max neval
     ## f0(x, f)  409.578  415.5165  426.9041  418.9500  424.3400  4237.466 10000
     ## f1(x, f)  411.208  418.3095  430.4231  421.8645  427.4155  5550.120 10000
     ## f2(x, f)  474.681  487.1265  498.8509  492.6960  497.6360  2552.075 10000
     ## f3(x, f) 1395.582 1442.3785 1494.0197 1459.3515 1472.5205 28121.379 10000
     set.seed(1)

     x <- rnorm(10000)
     f <- factor(rpois(10000, 5))

     tapply_ <- function(x, f, FUN) { unlist(lapply(split(x, f), FUN)) }

     f0 <- function(x, f) { unlist(lapply(split(x, f), mean)) }
     f1 <- function(x, f) { tapply_(x, f, mean) }
     f2 <- function(x, f) { tapply(x, f, mean) }
     f3 <- function(x, f) { by(x, f, mean) }

     bench <- microbenchmark::microbenchmark(
				f0(x, f), f1(x, f), f2(x, f), f3(x, f),
				times = 1E4)

     print(bench)
   #+end_src

** How to fast subset rows corresponding to max value by group?

   #+begin_src R
     ## Row with maximum `g` for each group `id` in the `bdt` data.table
     bdt[bdt[, .I[g == max(g)], by = id]$V1]
   #+end_src

   Source: [[https://stackoverflow.com/a/16574176/2860744][subset rows corresponding to max value by group using data.table]]

** How to create named vector programatically in one statement?

   #+begin_src R
     out <- setNames(c("value1", "value2"), c("name1", "name2"))
   #+end_src

   Source: [[https://stackoverflow.com/a/22428439/2860744][create a numeric vector with names in one statement?]]

** How to get all function call arguments as a list?

   Including ellipsis also!

   #+begin_src R
     f <- function(a, b = 2, ...) { c(as.list(environment()), list(...)) }
   #+end_src

   Source: [[https://stackoverflow.com/a/17244041][get all Parameters as List]]

** How to debug an error thrown in a package?

   #+begin_src R
     options(error = recover, show.error.locations = TRUE, warn = 2)
   #+end_src

   Source: [[https://stackoverflow.com/a/13456223/2860744][debugging unexpected errors in R -- how can I find where the
   error occurred?]]

** How to compute a simple moving average with base R?

   #+begin_src R
     SMA <- function(x, K) {
       if(!(K %% 2)) stop("K is not even")
       rowMeans(embed(c(rep(NA, K / 2), x, rep(NA, K / 2)),  K), na.rm = TRUE)
     }
   #+end_src

   Source:
   - [[https://stackoverflow.com/a/51472225/20521992][Centered moving average in R (without using packages)]]

** How to set the seed locally for a function?

   Note: this needs validation.

   #+begin_src R
     myfun <- function(seed) {
       old  <- .Random.seed
       on.exit({assign(".Random.seed", old, envir = .GlobalEnv)})
       set.seed(seed)
     }
   #+end_src

** Visualization

*** How to draw a plot with minimal margins?

    #+begin_src R
      ## oma: Outer  = device margin lines (bltr)
      ## mar: Margin = figure margin lines (bltr)
      ## mgp:      ? = axis margin lines (title, label, line)

      ## No title
      opar <- par(
        oma = c(0, 0, 0, 0) + .1,
        mar = c(3, 3, 0, 0),
        mgp = c(2, 1, 0)
      )

      plot(x = 1:10, y = 1:10)

      ## No title nor axis labels
      opar <- par(
        oma = c(0, 0, 0, 0) + .1,
        mar = c(2, 2, 0, 0),
        mgp = c(2, 1, 0)
      )

      plot(x = 1:10, y = 1:10)
    #+end_src

*** How to check if a value is in an interval?

    #+begin_src R
      ## x <- 1
      ## confint <- c(-0.5, 0.5)
      (prod(sign(confint - x)) < 0)
    #+end_src

    Source: rickyrick at libera.chat

*** How to cache a read function?

    Use [[https://cran.r-project.org/web/packages/memoise/index.html][memoise]] to store the function call on memory, or an ad-hoc implementation
    like [[https://github.com/bioDS/phyloRNAanalysis/blob/b9032c8c3a3f134cd73c44fe25618f659b6f5d79/src/utils.r#L170-L191][here]] (Colombo at Libera.chat).

*** How to use =geom_tile= with irregular data?

 Note that =?geom_tile= recommends =akima::interp=.

 #+begin_src R
   x <- mtcars$hp ## x-axis
   y <- mtcars$qsec ## y-axis
   z <- mtcars$mpg ## surface color

   ak   <- akima::interp(x, y, z)
   DF   <- expand.grid(ak[1:2])
   DF$z <- ak[[3]]

   DF <- data.frame(expand.grid(ak[1:2]), z = c(ak[[3]]))

   ggplot(DF, aes(x, y, fill = z)) +
     geom_tile()
 #+end_src

 If the data size is large, constructing the data.frame as follows
 might be more efficient.

 #+begin_src R
   DF   <- expand.grid(ak[1:2])
   DF$z <- ak[[3]]
 #+end_src

*** How to remove white lines from =geom_tile= with ggplot2?
    The horizontal and vertical variable values should be equally spaced for
    =geom_tile= to work automatically. If there are white lines, there might be
    small inconsistencies in the gap between a few values (e.g., the first value
    is 1E-4 instead of an actual zero). Try ~round(x)~ or ~factor(x)~ for a
    quick fix.

    Source:
    - [[https://stackoverflow.com/a/51934527][r - ggplot geom_tile, remove vertical white lines]]
    - [[https://stackoverflow.com/a/60237872][r - how to remove white lines from geom_tile (heat map) using ggplot2]]

*** How to plot in reverse log scale with ggplot2?

    #+begin_src R
      #' Reverse log transformation
      #'
      #' @param base a positive or complex number: logarithm base.
      # 'Defaults to `e=exp(1)`.
      #' @return
      #' @reference https://gist.github.com/JoFrhwld/2266961
      .revlog_trans <- function(base = exp(1)){
        scales::trans_new(
                  name      = paste("revlog-", base, sep = ""),
                  transform = function(x){ -log(x, base) },
                  inverse   = function(x){ base^(-x) },
                  breaks    = scales::log_breaks(base = base),
                  domain    = c(1e-100, Inf)
                )
      }

      scale_x_revlog10 <- function(...) {
        scale_x_continuous(trans = .revlog_trans(base = 10), ...)
      }

      scale_y_revlog10 <- function(...) {
        scale_y_continuous(trans = .revlog_trans(base = 10), ...)
      }
    #+end_src

*** How to add labels near the plot boundaries with ggplot2?

    Use =-Inf= and =Inf= to signal the left/bottom and right/top end
    respectively, e.g., use =x=Inf= and =y=Inf= to place a =geom_label= on the
    north-eath.

    #+begin_src R
      ggplot() +
        geom_point(aes(x = 1:10, y = rnorm(10))) +
        geom_label(aes(x = Inf, y = Inf, label = "Some text"),
                   vjust = 1, hjust = 1)
    #+end_src

    Source:
    - [[https://stackoverflow.com/a/61277246/2860744][How to add a geom_text label containing data in the top right of a ggplot...]]

*** How to move the legend closer to the axis label with ggplot2?
    Give yourself the gift of the manual fine tuning using =theme(legend.margin
    = margin(-10, 0, 0, 0))=, where =-10= needs to be defined on a case-by-case
    basis.

    Source:
    - [[https://stackoverflow.com/a/60119441][r - How to move legend up closer to the x-axis label in ggplot2]]

*** How to make ggplot2 match LaTeX graphics and font size?

    Reasonable sizes are 11pt (3.87mm) for manuscripts, 24pt (8.44mm) or
    25pt (8.79mm) for posters read at 1m of distance.

    - Use =\show\f@size= in LaTeX to show the font length
    - Use =theme(text = element_text(size = 11))= in R to set the target font
      size in points
    - Use =\the\linewidth= in LaTeX to show the line width
      - Note that =\textwidth= ignore borders that could be defined in the
        document class
    - Use =ggsave(..., width = 10, units = "in")= to match LaTeX's line width
    - Include the figure with ~width=\linewidth~

    Source:
    - [exa] at libera.chat
    - [[https://tex.stackexchange.com/a/119229/38051][Get current font size as length - TeX - LaTeX Stack Exchange]]

*** How to plot in log scale with base R?

    #+begin_src R
      plot(exp(1:10), 1:10, log = "x")
      plot(1:10, exp(1:10), log = "y")
      plot(exp(1:10), exp(1:10), log = "xy")
    #+end_src

*** How to fine tune R plot margins?

    - [[https://www.rstudio.com/wp-content/uploads/2016/10/how-big-is-your-graph.pdf][How Big is Your Graph?]]

*** How to make beautiful plots with base R?

    - [[http://karolis.koncevicius.lt/posts/r_base_plotting_without_wrappers/][R base plotting without wrappers]]

** How to improve the look of my rmarkdown HTML document?

   Thanks to fendur on #R at libera.chat

   - Client-side, precomputed dashboard like document:
     - Idea: one /chapter/ contains an image plus some comments
     - Start with =html_document=
     - Use =.tabset-pills= to organize chapters
     - Use =.tabset-fade= to make switching smoother
   - [[https://holtzy.github.io/Pimp-my-rmd/][Pimp my RMD: a few tips for R Markdown]]

  Below is a quick template I prepared.

  #+begin_src ascii
    ---
    title: "Barebone dashboard"
    date: "`r Sys.Date()`"
    output: html_document
    ---

    <style type="text/css">
    .main-container {
       max-width: 100% !important;
    }
    .title, .author, .date {
      display:inline!important;
    }
    .nav-pills {
      line-height: 0px !important;
    }
    .h1 {
     font-size: 16px !important;
    }
    </style>

    ```{r setup, include = FALSE}
    knitr::opts_chunk$set(
      echo       = FALSE,
      fig.align  = "center",
      fig.width  = 16,
      fig.height = 8.1,
      out.height = "80%"
    )
    ```

    # {.tabset .tabset-fade .tabset-pills}

    ## Precipitation per year

    ```{r}
    plot(Nile, col = "darkgreen", lwd = 2, log = "y")
    title(main = "Annual flow of the river", adj = 1, line = .5)
    ```

    1. This is a full-page wide picture
    2. Line 2
    3. Line 3
    4. Line 4
    5. Line 5

    ## MPG explained

    ```{r}
    par(mfrow = c(1, 2))
    plot(mtcars$mpg, mtcars$drat)
    plot(mtcars$mpg, mtcars$wt)
    ```

    1. This is a full-page side-by-side picture
    2. Line 2
    3. Line 3
    4. Line 4
    5. Line 5

    ## Species and width

    ```{r fig.width = 8.1, fig.height = 8.1}
    pairs(iris[, 1:3], col = iris$Species, bg = iris$Species, pch = 21)
    ```

    1. This is a full-page square picture
    2. Line 2
    3. Line 3
    4. Line 4
    5. Line 5
  #+end_src

** Where can I find useful addins for RStudio?

   Check [[https://github.com/daattali/addinslist][GitHub - daattali/addinslist]] to discover and install useful RStudio
   addins. You can install the =addinslist= package to browse the list from
   RStudio.

   Here are some suggestions:
   - [[https://github.com/seasmith/AlignAssign][GitHub - seasmith/AlignAssign: Align the assignment operators within a highli...]]
   - [[https://github.com/petermeissner/assignparams][GitHub - petermeissner/assignparams: RStudio Addin to evaluate comma separate...]]
   - [[https://github.com/dcomtois/sortLines][GitHub - dcomtois/sortLines: Adds "Sort Selected Lines" to RStudio's Addins menu]]

** Resources

   - [[https://pj.freefaculty.org/R/Rtips.html][Rtips]]
   - [[http://karolis.koncevicius.lt/posts/collection_of_simple_r_shortcuts/][A Collection of Simple R Shortcuts]]
   - [[https://csgillespie.github.io/efficientR/set-up.html#blas-and-alternative-r-interpreters][Efficient R programming]]
   - [[https://github.com/erikgahner/awesome-ggplot2][erikgahner/awesome-ggplot2: A curated list of awesome ggplot2 tutorials,
     packages, etc.]]
